// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: employee.proto

#include "employee.pb.h"
#include "employee.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace employee {

static const char* EmployeeDb_method_names[] = {
  "/employee.EmployeeDb/InsertEmployee",
  "/employee.EmployeeDb/GetList",
  "/employee.EmployeeDb/GetPostAndLead",
  "/employee.EmployeeDb/SetEmployeePost",
  "/employee.EmployeeDb/SetEmployeeLead",
  "/employee.EmployeeDb/DeleteEmployee",
};

std::unique_ptr< EmployeeDb::Stub> EmployeeDb::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmployeeDb::Stub> stub(new EmployeeDb::Stub(channel, options));
  return stub;
}

EmployeeDb::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InsertEmployee_(EmployeeDb_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetList_(EmployeeDb_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetPostAndLead_(EmployeeDb_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEmployeePost_(EmployeeDb_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEmployeeLead_(EmployeeDb_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteEmployee_(EmployeeDb_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EmployeeDb::Stub::InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::StatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Employee, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertEmployee_, context, request, response);
}

void EmployeeDb::Stub::async::InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Employee, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertEmployee_, context, request, response, std::move(f));
}

void EmployeeDb::Stub::async::InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertEmployee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::PrepareAsyncInsertEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::StatusReply, ::employee::Employee, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertEmployee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::AsyncInsertEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertEmployeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::employee::EmployeeReply>* EmployeeDb::Stub::GetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::employee::EmployeeReply>::Create(channel_.get(), rpcmethod_GetList_, context, request);
}

void EmployeeDb::Stub::async::GetList(::grpc::ClientContext* context, const ::employee::GetListRequest* request, ::grpc::ClientReadReactor< ::employee::EmployeeReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::employee::EmployeeReply>::Create(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::employee::EmployeeReply>* EmployeeDb::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::employee::EmployeeReply>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::employee::EmployeeReply>* EmployeeDb::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::employee::EmployeeReply>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, false, nullptr);
}

::grpc::Status EmployeeDb::Stub::GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::employee::PostAndLead* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Id, ::employee::PostAndLead, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPostAndLead_, context, request, response);
}

void EmployeeDb::Stub::async::GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::PostAndLead* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Id, ::employee::PostAndLead, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPostAndLead_, context, request, response, std::move(f));
}

void EmployeeDb::Stub::async::GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::PostAndLead* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPostAndLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>* EmployeeDb::Stub::PrepareAsyncGetPostAndLeadRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::PostAndLead, ::employee::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPostAndLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>* EmployeeDb::Stub::AsyncGetPostAndLeadRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPostAndLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmployeeDb::Stub::SetEmployeePost(::grpc::ClientContext* context, const ::employee::Post_Setter& request, ::employee::StatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Post_Setter, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEmployeePost_, context, request, response);
}

void EmployeeDb::Stub::async::SetEmployeePost(::grpc::ClientContext* context, const ::employee::Post_Setter* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Post_Setter, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeePost_, context, request, response, std::move(f));
}

void EmployeeDb::Stub::async::SetEmployeePost(::grpc::ClientContext* context, const ::employee::Post_Setter* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeePost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::PrepareAsyncSetEmployeePostRaw(::grpc::ClientContext* context, const ::employee::Post_Setter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::StatusReply, ::employee::Post_Setter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEmployeePost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::AsyncSetEmployeePostRaw(::grpc::ClientContext* context, const ::employee::Post_Setter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEmployeePostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmployeeDb::Stub::SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Lead_Setter& request, ::employee::StatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Lead_Setter, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEmployeeLead_, context, request, response);
}

void EmployeeDb::Stub::async::SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Lead_Setter* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Lead_Setter, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeeLead_, context, request, response, std::move(f));
}

void EmployeeDb::Stub::async::SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Lead_Setter* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEmployeeLead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::PrepareAsyncSetEmployeeLeadRaw(::grpc::ClientContext* context, const ::employee::Lead_Setter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::StatusReply, ::employee::Lead_Setter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEmployeeLead_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::AsyncSetEmployeeLeadRaw(::grpc::ClientContext* context, const ::employee::Lead_Setter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEmployeeLeadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmployeeDb::Stub::DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::employee::StatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::employee::Id, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteEmployee_, context, request, response);
}

void EmployeeDb::Stub::async::DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::employee::Id, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEmployee_, context, request, response, std::move(f));
}

void EmployeeDb::Stub::async::DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteEmployee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::PrepareAsyncDeleteEmployeeRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::employee::StatusReply, ::employee::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteEmployee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* EmployeeDb::Stub::AsyncDeleteEmployeeRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteEmployeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

EmployeeDb::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeDb_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeDb::Service, ::employee::Employee, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeDb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Employee* req,
             ::employee::StatusReply* resp) {
               return service->InsertEmployee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeDb_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EmployeeDb::Service, ::employee::GetListRequest, ::employee::EmployeeReply>(
          [](EmployeeDb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::GetListRequest* req,
             ::grpc::ServerWriter<::employee::EmployeeReply>* writer) {
               return service->GetList(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeDb_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeDb::Service, ::employee::Id, ::employee::PostAndLead, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeDb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Id* req,
             ::employee::PostAndLead* resp) {
               return service->GetPostAndLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeDb_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeDb::Service, ::employee::Post_Setter, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeDb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Post_Setter* req,
             ::employee::StatusReply* resp) {
               return service->SetEmployeePost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeDb_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeDb::Service, ::employee::Lead_Setter, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeDb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Lead_Setter* req,
             ::employee::StatusReply* resp) {
               return service->SetEmployeeLead(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmployeeDb_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmployeeDb::Service, ::employee::Id, ::employee::StatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmployeeDb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::employee::Id* req,
             ::employee::StatusReply* resp) {
               return service->DeleteEmployee(ctx, req, resp);
             }, this)));
}

EmployeeDb::Service::~Service() {
}

::grpc::Status EmployeeDb::Service::InsertEmployee(::grpc::ServerContext* context, const ::employee::Employee* request, ::employee::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeDb::Service::GetList(::grpc::ServerContext* context, const ::employee::GetListRequest* request, ::grpc::ServerWriter< ::employee::EmployeeReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeDb::Service::GetPostAndLead(::grpc::ServerContext* context, const ::employee::Id* request, ::employee::PostAndLead* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeDb::Service::SetEmployeePost(::grpc::ServerContext* context, const ::employee::Post_Setter* request, ::employee::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeDb::Service::SetEmployeeLead(::grpc::ServerContext* context, const ::employee::Lead_Setter* request, ::employee::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmployeeDb::Service::DeleteEmployee(::grpc::ServerContext* context, const ::employee::Id* request, ::employee::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace employee

