# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import employee_pb2 as employee__pb2


class EmployeeDbStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertEmployee = channel.unary_unary(
                '/employee.EmployeeDb/InsertEmployee',
                request_serializer=employee__pb2.Employee.SerializeToString,
                response_deserializer=employee__pb2.StatusReply.FromString,
                )
        self.GetList = channel.unary_stream(
                '/employee.EmployeeDb/GetList',
                request_serializer=employee__pb2.GetListRequest.SerializeToString,
                response_deserializer=employee__pb2.EmployeeReply.FromString,
                )
        self.GetPostAndLead = channel.unary_unary(
                '/employee.EmployeeDb/GetPostAndLead',
                request_serializer=employee__pb2.Id.SerializeToString,
                response_deserializer=employee__pb2.PostAndLead.FromString,
                )
        self.SetEmployeePost = channel.unary_unary(
                '/employee.EmployeeDb/SetEmployeePost',
                request_serializer=employee__pb2.Post_Setter.SerializeToString,
                response_deserializer=employee__pb2.StatusReply.FromString,
                )
        self.SetEmployeeLead = channel.unary_unary(
                '/employee.EmployeeDb/SetEmployeeLead',
                request_serializer=employee__pb2.Lead_Setter.SerializeToString,
                response_deserializer=employee__pb2.StatusReply.FromString,
                )
        self.DeleteEmployee = channel.unary_unary(
                '/employee.EmployeeDb/DeleteEmployee',
                request_serializer=employee__pb2.Id.SerializeToString,
                response_deserializer=employee__pb2.StatusReply.FromString,
                )


class EmployeeDbServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InsertEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostAndLead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEmployeePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEmployeeLead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmployeeDbServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertEmployee,
                    request_deserializer=employee__pb2.Employee.FromString,
                    response_serializer=employee__pb2.StatusReply.SerializeToString,
            ),
            'GetList': grpc.unary_stream_rpc_method_handler(
                    servicer.GetList,
                    request_deserializer=employee__pb2.GetListRequest.FromString,
                    response_serializer=employee__pb2.EmployeeReply.SerializeToString,
            ),
            'GetPostAndLead': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostAndLead,
                    request_deserializer=employee__pb2.Id.FromString,
                    response_serializer=employee__pb2.PostAndLead.SerializeToString,
            ),
            'SetEmployeePost': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEmployeePost,
                    request_deserializer=employee__pb2.Post_Setter.FromString,
                    response_serializer=employee__pb2.StatusReply.SerializeToString,
            ),
            'SetEmployeeLead': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEmployeeLead,
                    request_deserializer=employee__pb2.Lead_Setter.FromString,
                    response_serializer=employee__pb2.StatusReply.SerializeToString,
            ),
            'DeleteEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmployee,
                    request_deserializer=employee__pb2.Id.FromString,
                    response_serializer=employee__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'employee.EmployeeDb', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmployeeDb(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InsertEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee.EmployeeDb/InsertEmployee',
            employee__pb2.Employee.SerializeToString,
            employee__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/employee.EmployeeDb/GetList',
            employee__pb2.GetListRequest.SerializeToString,
            employee__pb2.EmployeeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPostAndLead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee.EmployeeDb/GetPostAndLead',
            employee__pb2.Id.SerializeToString,
            employee__pb2.PostAndLead.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEmployeePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee.EmployeeDb/SetEmployeePost',
            employee__pb2.Post_Setter.SerializeToString,
            employee__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEmployeeLead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee.EmployeeDb/SetEmployeeLead',
            employee__pb2.Lead_Setter.SerializeToString,
            employee__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee.EmployeeDb/DeleteEmployee',
            employee__pb2.Id.SerializeToString,
            employee__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
