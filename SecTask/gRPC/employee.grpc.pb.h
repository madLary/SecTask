// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: employee.proto
#ifndef GRPC_employee_2eproto__INCLUDED
#define GRPC_employee_2eproto__INCLUDED

#include "employee.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace employee {

class EmployeeDb final {
 public:
  static constexpr char const* service_full_name() {
    return "employee.EmployeeDb";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> AsyncInsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(AsyncInsertEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> PrepareAsyncInsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(PrepareAsyncInsertEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::employee::Employee>> GetList(::grpc::ClientContext* context, const ::employee::GetListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::employee::Employee>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>> AsyncGetList(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::employee::Employee>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::employee::PostAndLead* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::PostAndLead>> AsyncGetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::PostAndLead>>(AsyncGetPostAndLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::PostAndLead>> PrepareAsyncGetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::PostAndLead>>(PrepareAsyncGetPostAndLeadRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter& request, ::employee::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> AsyncSetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(AsyncSetEmployeePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> PrepareAsyncSetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(PrepareAsyncSetEmployeePostRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter& request, ::employee::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> AsyncSetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(AsyncSetEmployeeLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> PrepareAsyncSetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(PrepareAsyncSetEmployeeLeadRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::employee::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> AsyncDeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(AsyncDeleteEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>> PrepareAsyncDeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>>(PrepareAsyncDeleteEmployeeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetList(::grpc::ClientContext* context, const ::employee::GetListRequest* request, ::grpc::ClientReadReactor< ::employee::Employee>* reactor) = 0;
      virtual void GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::PostAndLead* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::PostAndLead* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* AsyncInsertEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* PrepareAsyncInsertEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::employee::Employee>* GetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::employee::Employee>* AsyncGetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::employee::Employee>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::PostAndLead>* AsyncGetPostAndLeadRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::PostAndLead>* PrepareAsyncGetPostAndLeadRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* AsyncSetEmployeePostRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* PrepareAsyncSetEmployeePostRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* AsyncSetEmployeeLeadRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* PrepareAsyncSetEmployeeLeadRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* AsyncDeleteEmployeeRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::employee::StatusReply>* PrepareAsyncDeleteEmployeeRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::employee::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> AsyncInsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(AsyncInsertEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> PrepareAsyncInsertEmployee(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(PrepareAsyncInsertEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::employee::Employee>> GetList(::grpc::ClientContext* context, const ::employee::GetListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::employee::Employee>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>> AsyncGetList(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::employee::Employee>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    ::grpc::Status GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::employee::PostAndLead* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>> AsyncGetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>>(AsyncGetPostAndLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>> PrepareAsyncGetPostAndLead(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>>(PrepareAsyncGetPostAndLeadRaw(context, request, cq));
    }
    ::grpc::Status SetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter& request, ::employee::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> AsyncSetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(AsyncSetEmployeePostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> PrepareAsyncSetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(PrepareAsyncSetEmployeePostRaw(context, request, cq));
    }
    ::grpc::Status SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter& request, ::employee::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> AsyncSetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(AsyncSetEmployeeLeadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> PrepareAsyncSetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(PrepareAsyncSetEmployeeLeadRaw(context, request, cq));
    }
    ::grpc::Status DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::employee::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> AsyncDeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(AsyncDeleteEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>> PrepareAsyncDeleteEmployee(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>>(PrepareAsyncDeleteEmployeeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) override;
      void InsertEmployee(::grpc::ClientContext* context, const ::employee::Employee* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetList(::grpc::ClientContext* context, const ::employee::GetListRequest* request, ::grpc::ClientReadReactor< ::employee::Employee>* reactor) override;
      void GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::PostAndLead* response, std::function<void(::grpc::Status)>) override;
      void GetPostAndLead(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::PostAndLead* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) override;
      void SetEmployeePost(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) override;
      void SetEmployeeLead(::grpc::ClientContext* context, const ::employee::Setter* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::StatusReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteEmployee(::grpc::ClientContext* context, const ::employee::Id* request, ::employee::StatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* AsyncInsertEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* PrepareAsyncInsertEmployeeRaw(::grpc::ClientContext* context, const ::employee::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::employee::Employee>* GetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request) override;
    ::grpc::ClientAsyncReader< ::employee::Employee>* AsyncGetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::employee::Employee>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::employee::GetListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>* AsyncGetPostAndLeadRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::PostAndLead>* PrepareAsyncGetPostAndLeadRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* AsyncSetEmployeePostRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* PrepareAsyncSetEmployeePostRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* AsyncSetEmployeeLeadRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* PrepareAsyncSetEmployeeLeadRaw(::grpc::ClientContext* context, const ::employee::Setter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* AsyncDeleteEmployeeRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::employee::StatusReply>* PrepareAsyncDeleteEmployeeRaw(::grpc::ClientContext* context, const ::employee::Id& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InsertEmployee_;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPostAndLead_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEmployeePost_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEmployeeLead_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEmployee_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status InsertEmployee(::grpc::ServerContext* context, const ::employee::Employee* request, ::employee::StatusReply* response);
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::employee::GetListRequest* request, ::grpc::ServerWriter< ::employee::Employee>* writer);
    virtual ::grpc::Status GetPostAndLead(::grpc::ServerContext* context, const ::employee::Id* request, ::employee::PostAndLead* response);
    virtual ::grpc::Status SetEmployeePost(::grpc::ServerContext* context, const ::employee::Setter* request, ::employee::StatusReply* response);
    virtual ::grpc::Status SetEmployeeLead(::grpc::ServerContext* context, const ::employee::Setter* request, ::employee::StatusReply* response);
    virtual ::grpc::Status DeleteEmployee(::grpc::ServerContext* context, const ::employee::Id* request, ::employee::StatusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertEmployee() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InsertEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertEmployee(::grpc::ServerContext* context, ::employee::Employee* request, ::grpc::ServerAsyncResponseWriter< ::employee::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::employee::GetListRequest* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::employee::GetListRequest* request, ::grpc::ServerAsyncWriter< ::employee::Employee>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPostAndLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPostAndLead() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPostAndLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostAndLead(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPostAndLead(::grpc::ServerContext* context, ::employee::Id* request, ::grpc::ServerAsyncResponseWriter< ::employee::PostAndLead>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEmployeePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEmployeePost() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetEmployeePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePost(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeePost(::grpc::ServerContext* context, ::employee::Setter* request, ::grpc::ServerAsyncResponseWriter< ::employee::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEmployeeLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEmployeeLead() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetEmployeeLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeLead(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeeLead(::grpc::ServerContext* context, ::employee::Setter* request, ::grpc::ServerAsyncResponseWriter< ::employee::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEmployee() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployee(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEmployee(::grpc::ServerContext* context, ::employee::Id* request, ::grpc::ServerAsyncResponseWriter< ::employee::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InsertEmployee<WithAsyncMethod_GetList<WithAsyncMethod_GetPostAndLead<WithAsyncMethod_SetEmployeePost<WithAsyncMethod_SetEmployeeLead<WithAsyncMethod_DeleteEmployee<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InsertEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertEmployee() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::employee::StatusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Employee* request, ::employee::StatusReply* response) { return this->InsertEmployee(context, request, response); }));}
    void SetMessageAllocatorFor_InsertEmployee(
        ::grpc::MessageAllocator< ::employee::Employee, ::employee::StatusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Employee, ::employee::StatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::employee::GetListRequest, ::employee::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::GetListRequest* request) { return this->GetList(context, request); }));
    }
    ~WithCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::employee::GetListRequest* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::employee::Employee>* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::GetListRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPostAndLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPostAndLead() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Id, ::employee::PostAndLead>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Id* request, ::employee::PostAndLead* response) { return this->GetPostAndLead(context, request, response); }));}
    void SetMessageAllocatorFor_GetPostAndLead(
        ::grpc::MessageAllocator< ::employee::Id, ::employee::PostAndLead>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Id, ::employee::PostAndLead>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPostAndLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostAndLead(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPostAndLead(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetEmployeePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetEmployeePost() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Setter, ::employee::StatusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Setter* request, ::employee::StatusReply* response) { return this->SetEmployeePost(context, request, response); }));}
    void SetMessageAllocatorFor_SetEmployeePost(
        ::grpc::MessageAllocator< ::employee::Setter, ::employee::StatusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Setter, ::employee::StatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetEmployeePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePost(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeePost(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetEmployeeLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetEmployeeLead() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Setter, ::employee::StatusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Setter* request, ::employee::StatusReply* response) { return this->SetEmployeeLead(context, request, response); }));}
    void SetMessageAllocatorFor_SetEmployeeLead(
        ::grpc::MessageAllocator< ::employee::Setter, ::employee::StatusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Setter, ::employee::StatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetEmployeeLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeLead(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeeLead(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteEmployee() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::employee::Id, ::employee::StatusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::employee::Id* request, ::employee::StatusReply* response) { return this->DeleteEmployee(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteEmployee(
        ::grpc::MessageAllocator< ::employee::Id, ::employee::StatusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::employee::Id, ::employee::StatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployee(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InsertEmployee<WithCallbackMethod_GetList<WithCallbackMethod_GetPostAndLead<WithCallbackMethod_SetEmployeePost<WithCallbackMethod_SetEmployeeLead<WithCallbackMethod_DeleteEmployee<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InsertEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertEmployee() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InsertEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::employee::GetListRequest* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPostAndLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPostAndLead() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPostAndLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostAndLead(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEmployeePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEmployeePost() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetEmployeePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePost(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEmployeeLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEmployeeLead() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetEmployeeLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeLead(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEmployee() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployee(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertEmployee() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InsertEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertEmployee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::employee::GetListRequest* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPostAndLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPostAndLead() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPostAndLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostAndLead(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPostAndLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEmployeePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEmployeePost() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetEmployeePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePost(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeePost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEmployeeLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEmployeeLead() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetEmployeeLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeLead(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEmployeeLead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEmployee() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployee(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEmployee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertEmployee() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertEmployee(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetList(context, request); }));
    }
    ~WithRawCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::employee::GetListRequest* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPostAndLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPostAndLead() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPostAndLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPostAndLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPostAndLead(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPostAndLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetEmployeePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetEmployeePost() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEmployeePost(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetEmployeePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeePost(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeePost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetEmployeeLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetEmployeeLead() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEmployeeLead(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetEmployeeLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEmployeeLead(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEmployeeLead(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteEmployee() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteEmployee(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEmployee(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertEmployee() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Employee, ::employee::StatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Employee, ::employee::StatusReply>* streamer) {
                       return this->StreamedInsertEmployee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertEmployee(::grpc::ServerContext* /*context*/, const ::employee::Employee* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertEmployee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Employee,::employee::StatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPostAndLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPostAndLead() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Id, ::employee::PostAndLead>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Id, ::employee::PostAndLead>* streamer) {
                       return this->StreamedGetPostAndLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPostAndLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPostAndLead(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::PostAndLead* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPostAndLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Id,::employee::PostAndLead>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEmployeePost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEmployeePost() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Setter, ::employee::StatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Setter, ::employee::StatusReply>* streamer) {
                       return this->StreamedSetEmployeePost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEmployeePost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEmployeePost(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEmployeePost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Setter,::employee::StatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEmployeeLead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEmployeeLead() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Setter, ::employee::StatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Setter, ::employee::StatusReply>* streamer) {
                       return this->StreamedSetEmployeeLead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEmployeeLead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEmployeeLead(::grpc::ServerContext* /*context*/, const ::employee::Setter* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEmployeeLead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Setter,::employee::StatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteEmployee() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::employee::Id, ::employee::StatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::employee::Id, ::employee::StatusReply>* streamer) {
                       return this->StreamedDeleteEmployee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEmployee(::grpc::ServerContext* /*context*/, const ::employee::Id* /*request*/, ::employee::StatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEmployee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::employee::Id,::employee::StatusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InsertEmployee<WithStreamedUnaryMethod_GetPostAndLead<WithStreamedUnaryMethod_SetEmployeePost<WithStreamedUnaryMethod_SetEmployeeLead<WithStreamedUnaryMethod_DeleteEmployee<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::employee::GetListRequest, ::employee::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::employee::GetListRequest, ::employee::Employee>* streamer) {
                       return this->StreamedGetList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::employee::GetListRequest* /*request*/, ::grpc::ServerWriter< ::employee::Employee>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::employee::GetListRequest,::employee::Employee>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetList<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_InsertEmployee<WithSplitStreamingMethod_GetList<WithStreamedUnaryMethod_GetPostAndLead<WithStreamedUnaryMethod_SetEmployeePost<WithStreamedUnaryMethod_SetEmployeeLead<WithStreamedUnaryMethod_DeleteEmployee<Service > > > > > > StreamedService;
};

}  // namespace employee


#endif  // GRPC_employee_2eproto__INCLUDED
